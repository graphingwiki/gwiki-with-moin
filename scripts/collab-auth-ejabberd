#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
collab-auth-ejabberd: Provide external auth for ejabberd against collab

@copyright: 2009-2015 by Mika Sepp√§nen, Marko Laakso, Joachim Viide
@license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import os
import sys
import time
from struct import pack, unpack

import ConfigParser


def _parse_list(value):
    return [x.strip() for x in value.split(",")]


config = ConfigParser.RawConfigParser()
config.read('/etc/local/collab/collab.ini')

mylogconf = config.get('collab', 'logconf')
mybaseinstancedir = config.get('collab', 'baseinstancedir')
mywikidir = config.get('collab', 'wikidir')
myhtmldir = config.get('collab', 'htmldir')
mycacherefreshtime = config.getfloat('collab', 'cacherefreshtime')
myjabberdomains = _parse_list(config.get('jabber', 'jabberdomain'))
myconferencedomains = _parse_list(config.get('jabber', 'conferencedomain'))

from MoinMoin import log
log.load_config(mylogconf)
logging = log.getLogger("collab-auth")
logging.debug("collab-auth started")

# We need to import contexts before importing users, because otherwise
# the relative imports in MoinMoin will fail.
import MoinMoin.web.contexts
from MoinMoin.user import User
from MoinMoin.script import MinimalMoinScript
from MoinMoin.config import multiconfig

os.chdir(myhtmldir)


class RequestCache(object):
    def __init__(self, refresh_interval=0):
        self.refresh_interval = refresh_interval

        self.cache = dict()
        self.last_check = float("-inf")
        self.next_refresh = float("-inf")

    def _load(self, wikiname, pagename, checkWiki):
        mydata = os.path.join(mywikidir, wikiname)
        myconfig = os.path.join(mydata, 'config')

        # check that instance is under collab/* URLs not just any instance
        # and check that there is config a dir for the instance
        if checkWiki:
            if not os.path.isdir(wikiname) or not os.path.isdir(myconfig):
                return False

        sys.path.insert(0, myconfig)

        reload(multiconfig)

        try:
            import wikiconfig
            reload(wikiconfig)
        except:
            pass

        try:
            import farmconfig
            reload(farmconfig)
        except:
            pass

        request = MinimalMoinScript(pagename)
        sys.path.remove(myconfig)
        return request

    def _unload(self, request):
        request.finish()

    def get(self, wikiname, pagename, checkWiki=True):
        now = time.time()

        if not self.last_check < now < self.next_refresh:
            # Either there is something weird going on with the time
            # or we need to refresh.
            for value in self.cache.values():
                self._unload(value)
            self.cache.clear()

            if self.refresh_interval > 0:
                until = self.refresh_interval - now % self.refresh_interval
                self.next_refresh = now + until
            else:
                self.next_refresh = float("-inf")
        self.last_check = now

        key = wikiname, pagename
        if key not in self.cache:
            result = self._load(wikiname, pagename, checkWiki)
            if result:
                self.cache[key] = result
            else:
                return False
        return self.cache[key]

request_cache = RequestCache(mycacherefreshtime)


def checkAccess(user, wiki):
    r = request_cache.get(wiki, 'AccessGroup')
    if not r:
        return False

    isgroup = r.cfg.cache.page_group_regexact.search
    members = [m for m in r.groups.get("AccessGroup") if not isgroup(m)]
    return user in members


def from_ejabberd():
    input_length = sys.stdin.read(2)
    (size,) = unpack('>h', input_length)
    return sys.stdin.read(size).split(':', 1)


def to_ejabberd(bool):
    answer = 0
    if bool:
        answer = 1
    token = pack('>hh', 2, answer)
    sys.stdout.write(token)
    sys.stdout.flush()


def to_ejabberd_string(string):
    token = pack('>h', len(string)) + string
    sys.stdout.write(token)
    sys.stdout.flush()


def convertUsername(username):
    return username.replace("%", "@")


def auth(args):
    start = time.time()
    try:
        username, server, password = args.split(':', 2)
    except ValueError:
        logging.error("got invalid args for auth: %s" % repr(args))
        return False

    logging.info("auth from user %s@%s called" % (username, server))

    r = request_cache.get("collab", "FrontPage", False)
    result = User(r, name=convertUsername(username), password=password).valid
    if not result:
        session = r.cfg.session_service.get_session(r, sid=password)
        userid = session.get("user.id", None)
        if userid is not None:
            user = User(r, id=userid)
            result = user.valid and (user.name == convertUsername(username))
    elapsedTime = 1000 * (time.time() - start)
    logging.info("auth from user %s@%s returned %s in %d ms" % (username, server, result, elapsedTime))
    return result


def isuser(args):
    start = time.time()
    try:
        username, server = args.split(':', 1)
    except ValueError:
        logging.error("got invalid args for isuser: %s" % repr(args))
        return False

    logging.info("isuser from user %s@%s called" % (username, server))

    r = request_cache.get("collab", "FrontPage", False)
    result = User(r, name=convertUsername(username)).exists()
    elapsedTime = 1000 * (time.time() - start)
    logging.info("isuser from user %s@%s returned %s in %d ms" % (username, server, result, elapsedTime))
    return result


def setpass(args):
    try:
        username, server, password = args.split(':', 2)
    except ValueError:
        logging.error("got invalid args for setpass: %s" % repr(args))
        return False

    logging.info("setpass from user %s@%s ignored" % (username, server))
    return False


def getaff(args):
    start = time.time()
    try:
        username, server, room, roomServer = args.split(':', 3)
    except ValueError:
        logging.error("got invalid args for getaff: %s" % repr(args))
        return "none"

    logging.info("getaff from user %s@%s and room %s@%s called" % (username, server, room, roomServer))

    result = "none"
    if server not in myjabberdomains:
        result = "none"
    elif roomServer not in myconferencedomains:
        result = "none"
    elif checkAccess(convertUsername(username), room.split(".", 1)[0]):
        result = "member"

    elapsedTime = 1000 * (time.time() - start)
    logging.info("getaff from user %s@%s and room %s@%s returned %s in %d ms" % (username, server, room, roomServer, result, elapsedTime))
    return result


while True:
    data = from_ejabberd()
    try:
        func, args = data
        args = args.decode("utf-8")
    except (ValueError, UnicodeDecodeError):
        logging.error("got invalid data from ejabberd: %s" % repr(data))
        to_ejabberd(False)
        continue

    success = False
    if func == "auth":
        success = auth(args)
    elif func == "isuser":
        success = isuser(args)
    elif func == "setpass":
        success = setpass(args)
    elif func == "getaff":
        result = getaff(args)
        to_ejabberd_string(result)
        continue
    to_ejabberd(success)
