#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
gwiki-showpage: A commandline-based wiki interface

@copyright: 2006 by Juhani Eronen <exec@iki.fi>
@license: MIT <http://www.opensource.org/licenses/mit-license.php>
"""

import sys, os

import getopt

from MoinMoin.script.cli.show import PluginScript as ShowScript

class ArgError(Exception):
    pass

def usage():
    sys.stderr.write("""Usage: %s [opts] [pagename] <path-to-wiki>

Options without arguments:
 -a | --auth           Use local user-based wiki authentication
Options with arguments:
 -d | --doaction       Perform requested wiki action on page
 -f | --form           Append the selected 
 -s | --search         Shothand for full search on the wiki
 -t | --tsearch        Shothand for title search on the wiki

The pagename argument defaults to FrontPage.

Examples:
$ %s -a -s protocol /wiki0
$ %s -a -d ShowGraph -f orderby=Year -f colorby=Status /wiki
"""  % (sys.argv[0], sys.argv[0], sys.argv[0]))

## Argument handling, it just goes on and on

def check_errors(args, key, val):
    if not args.has_key(key) or (args.has_key(key) and key in ['context']):
        args[key] = [val]
        return args
    else:
        sys.stderr.write("Error: Multiple instances of %s specified: %s and %s!\n" % \
              (key, args[key][0], val))
        usage()
        sys.exit(2)
try:
    opts, rest = getopt.getopt(sys.argv[1:], 'had:s:f:t:',
                               ['help', 'auth', 'doaction=',
                                'search=', 'form=', 'tsearch='])
except getopt.error, what:
    sys.exit(str(what))

basic_args = ['FrontPage', # Page
              '', # wikipath
              False] # authentication
args = {}

for o, a in opts:
    if o in ['h', '--help']:
        usage()
        sys.exit(0)
    elif o in ['-a', '--auth']:
        basic_args[-1] = True
    elif o in ['-d', '--doaction']:
        args = check_errors(args, 'action', a)
    elif o in ['-s', '--search']:
        basic_args[0] = 'FindPage'
        args = check_errors(args, 'action', 'fullsearch')
        args = check_errors(args, 'value', a)
        args = check_errors(args, 'titlesearch', '0')
        args = check_errors(args, 'context', '160')
    elif o in ['-t', '--tsearch']:
        args = check_errors(args, 'action', 'fullsearch')
        args = check_errors(args, 'value', a)
        args = check_errors(args, 'titlesearch', '1')
    elif o in ['-f', '--form']:
        key, val = a.split('=')
        args = check_errors(args, key, val)

try:
    # Arg handling
    if len(rest) == 2:
        basic_args[0:2] = rest[0:2]
    elif len(rest) == 1:
        basic_args[1] = rest[0]
    elif len(rest) == 0:
        print "Error: No path to wiki!"
        sys.exit(2)
    else:
        print "Error: Too many arguments!"
        sys.exit(2)

    # Next, try to include dirs and import
    os.chdir(basic_args[1])
    confdir = os.path.join(basic_args[1], 'config')
    sys.path.insert(0, confdir)

except:
    usage()
    raise

# Make a new request for the page
script = ShowScript([''], {})
script.parser.set_defaults(page=basic_args[0])
script.parser.set_defaults(config_dir=confdir)
# Don't care about real args
sys.argv = [sys.argv[0]]
script.options, script.args = script.parser.parse_args()
script.init_request()
req = script.request

# Fix redirect for searches with single hit
def cli_redirect(match):
    from MoinMoin.Page import Page
    p = Page(req, match.split('?')[0][2:])
    print p.send_page(req)
req.http_redirect = cli_redirect

# Auth
if basic_args[-1]:
    import posix, pwd
    # We need to import contexts before importing User, because otherwise
    # the relative imports in MoinMoin will fail.
    import MoinMoin.web.contexts
    from MoinMoin.user import User
    req.user = User(req, auth_username=pwd.getpwuid(posix.getuid())[0])

# Go, Spot, get html
script.run(req)
